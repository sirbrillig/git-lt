#!/bin/bash
# git-lt
# 
# Licensed under MIT License: http://opensource.org/licenses/MIT
#
# Copyright (c) 2013 Payton Swick payton@foolord.com
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# The branch to use as a mirror of svn
MIRROR_BRANCH='MIRRORBRANCH'

# The URL of git-lt to download during selfupdate
GIT_LT="https://raw.github.com/sirbrillig/git-lt/master/git-lt"

# The temp directory to download git-lt during selfupdate
TMP="/tmp"

# The directory in which git-lt runs
BIN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ACTION="$1"
shift
ARGUMENTS="$@"

# Die on errors
set -e

# Die on uninitialized vars
set -u

green='\e[32m'
yellow='\e[33m'
red='\e[31m'
end_color='\e[0m'
notice_message() {
  printf "${yellow}$@${end_color}\n" 1>&2
}

success_message() {
  printf "${green}$@${end_color}\n" 1>&2
}

error_message() {
  printf "${red}$@${end_color}\n" 1>&2
}

VERSION='0.6.4'

USAGE="git-lt $VERSION
A git plugin to allow using local branches for a remote svn repo.

usage:
git lt help  How do I use this thing?
git lt init  Initializes a git repository with a gitignore and creates a
             special mirror branch
git lt pull  Fetch the latest svn commit and rebase the current branch.
git lt push  Make an svn commit for the most recent git commit.
git lt add   Add a file to the git and svn repos.
git lt diff  Alias for svn diff, piped through a highlighter
git lt blame Alias for svn blame.
git lt commit  Perform an svn commit and run git lt pull
git lt status  Alias for svn status --ignore-externals

commands you probably won't use much:
git lt rebase  Rebases current branch to mirror branch
git lt fetch   Updates mirror branch to latest svn commit
git lt trash   Trash local branch
git lt reset-all	Trash local branch and run git lt pull
git lt selfupdate Try to update git-lt to the latest version.
"

GITIGNORE='.svn
*.swp
.config
*.err
*.pid
*.log
'

if [ -z "$ACTION" ]; then
	echo "$USAGE"
  exit 1
fi

if [ "$ACTION" == "help" ]; then
	echo "$USAGE"
	exit 0
fi

pipe_if_not_empty() {
	head=$(dd bs=1 count=1 2>/dev/null; echo a)
	head=${head%a}
	if [ "x$head" != x"" ]; then
		{ printf %s "$head"; cat; } | "$@"
	fi
}

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

set +e
svn info > /dev/null 2>&1
if [ $? -ne 0 ]; then
  error_message "I don't see a svn repository in this directory. I can't be of much help without that."
  exit 1
fi
set -e

BRANCH=$(git branch | sed -n '/\* /s///p')
if [ -z "$BRANCH" ]; then
  error_message "Could not find local branch name."
  exit 1
fi

if [ "$ACTION" == "selfupdate" ]; then
  notice_message "$GIT_LT"
  echo ""
  read -r -p "Are you sure you want to download the file at the above URL and save it to '$BIN'? [y/N] " RESPONSE
  if [[ ! $RESPONSE =~ ^([yY][eE][sS]|[yY])$ ]]; then
    error_message "selfupdate cancelled."
    exit 0
  fi
  curl -o "$TMP/git-lt" "$GIT_LT"
  if [ ! -e "$TMP/git-lt" ]; then
    error_message "download failed."
    exit 0
  fi
  # TODO: validate the file
  NEW_VERSION=$(grep "^VERSION" "$TMP/git-lt"|awk -F= '{print $2}'|tr -d "'")
  notice_message "downloaded version $NEW_VERSION"
  set +e
  vercomp "$NEW_VERSION" "$VERSION"
  VER_DIFF="$?"
  if [ -z "$NEW_VERSION" ] || [ "$VER_DIFF" != 1  ]; then
    error_message "Downloaded file is not a newer version of git-lt."
    exit 0
  fi
  notice_message "Setting permissions..."
  chmod 744 "$TMP/git-lt"
  notice_message "Copying new version into place..."
  cp "$TMP/git-lt" "$BIN/git-lt"
  set -e
  success_message "Update complete!"
  exit 0
fi

# Append any external repos to the gitignore.
EXTERNALS=$(svn st --ignore-externals|grep ^X|awk '/X/{print $2}')
GITIGNORE="$GITIGNORE$EXTERNALS"

if [ "$ACTION" == "st" ] || [ "$ACTION" == "status" ]; then
	svn st --ignore-externals | grep -v ^X | grep -v swp$ | grep -v \.git
  exit 0
fi

if [ "$ACTION" == "diff" ]; then
	# If there's been a recent pull in another branch, notify me that this branch
	# is out-of-date.
	notice_message "Checking the branch for updates..."
  if [ "$BRANCH" != "$MIRROR_BRANCH" ]; then
    git checkout "$MIRROR_BRANCH"
  fi
	LAST_PULLED_REV=$(svn info | grep ^Revision: | awk '{print $2}')
  git checkout "$BRANCH"
	OUR_PULLED_REV=$(git log --pretty=%B | grep 'svn update to version' | head -1 | awk '{print $5}')
	if [ "$LAST_PULLED_REV" -ne "$OUR_PULLED_REV" ]; then
		error_message "This branch is out-of-date (rev $OUR_PULLED_REV; mirror branch is at $LAST_PULLED_REV). You should do a git lt rebase."
		exit 1
	fi

	if [ -t 1 ]; then
		svn diff "$ARGUMENTS" | colordiff | pipe_if_not_empty less -R
	else
		svn diff "$ARGUMENTS"
	fi
  exit 0
fi

if [ "$ACTION" == "blame" ]; then
	svn blame "$ARGUMENTS"
  exit 0
fi

if [ "$ACTION" == "init" ]; then
  FIRST_COMMIT=''
  if [ -d '.git' ]; then
    notice_message "Looks like a git repository already exists here; skipping..."
  else
    notice_message "Initializing git repository"
    git init
		FIRST_COMMIT=1
  fi
  if [ -e '.gitignore' ]; then
    notice_message "Looks like a gitignore already exists here; skipping..."
    error_message "Be SURE that the gitignore contains the following:\n$GITIGNORE"
    # TODO: allow appending to current gitignore?
  else
    notice_message "Creating gitignore"
    echo "$GITIGNORE" > .gitignore
		git add .gitignore
		FIRST_COMMIT=1
  fi
	if [ -n "$FIRST_COMMIT" ]; then
		notice_message "Making initial commit"
		git add .
		git commit -am 'initial commit by git-lt'
	fi
	notice_message "Checking for branch"
	set +e
  EXISTS=$(git show-ref refs/heads/$MIRROR_BRANCH)
	set -e
  if [ -n "$EXISTS" ]; then
    notice_message "Looks like the $MIRROR_BRANCH branch already exists here; skipping..."
  else
    notice_message "Creating mirror branch '$MIRROR_BRANCH'"
    git branch "$MIRROR_BRANCH"
  fi
  success_message "All set!"
  exit 0
fi

if [ "$ACTION" == "fetch" ]; then
  notice_message "On branch $BRANCH"
  # exit if there are any uncommitted changes here
  set +e
  CHANGES=$(git status --porcelain|grep -v ^\?)
  set -e
  if [ -n "$CHANGES" ]; then
    error_message "There are local changes; please commit them before continuing"
    exit 1
  fi
  notice_message "Fetching remote data from svn"
  if [ "$BRANCH" != "$MIRROR_BRANCH" ]; then
    git checkout "$MIRROR_BRANCH"
  fi
  # if any of the following fails, go back to $BRANCH
  trap "git checkout '$BRANCH'" INT TERM
  set +e
  svn up --accept tf --ignore-externals && svn revert -R ./ && git add . && git commit -am "svn update to version $(svnversion) @ $(date)"
  set -e
  trap - INT TERM
  git checkout "$BRANCH"
  success_message "fetch complete!"
  exit 0
fi

if [ "$ACTION" == "rebase" ]; then
  git rebase "$MIRROR_BRANCH"
  success_message "rebase complete!"
  exit 0
fi

if [ "$ACTION" == "pull" ]; then
  git lt fetch
  git lt rebase
  exit 0
fi

if [ "$ACTION" == "trash" ]; then
  if [ "$BRANCH" != "$MIRROR_BRANCH" ]; then
    git checkout "$MIRROR_BRANCH"
  fi
  # if any of the following fails, go back to $BRANCH
  trap "git checkout '$BRANCH'" INT TERM
  set +e
	git branch -D "$BRANCH"
  set -e
  trap - INT TERM
  git checkout -b "$BRANCH"
  success_message "trash complete!"
  exit 0
fi

if [ "$ACTION" == "reset-all" ]; then
	git lt trash
	git lt pull
  success_message "trash and reset complete!"
  exit 0
fi

if [ "$ACTION" == "add" ]; then
  git add "$ARGUMENTS" && svn add "$ARGUMENTS"
  success_message "add complete!"
  exit 0
fi

finish_commit() {
  if [ "$BRANCH" == "$MIRROR_BRANCH" ] || [ "$BRANCH" == "master" ]; then
		return
  fi
	read -r -p "Do you want to delete this branch ($BRANCH) and update the master branch to the latest commit? [y/N] " RESPONSE
  if [[ ! $RESPONSE =~ ^([yY][eE][sS]|[yY])$ ]]; then
		return
  fi
	git checkout 'master' && git lt pull && git branch -D "$BRANCH"
}

if [ "$ACTION" == "push" ]; then
  # exit if there are any uncommitted changes here
  set +e
  CHANGES=$(git status --porcelain|grep -v ^?)
  set -e
  if [ -n "$CHANGES" ]; then
    error_message "There are local changes; please commit them before continuing"
    exit 1
  fi
  LASTMESSAGE=$(git log --format=%B -n 1)
  echo "$LASTMESSAGE"
  echo ""
  read -r -p "Are you sure you want to commit the current local state with the message above? [y/N] " RESPONSE
  if [[ ! $RESPONSE =~ ^([yY][eE][sS]|[yY])$ ]]; then
    error_message "push cancelled."
    exit 0
  fi
  svn commit -m "$LASTMESSAGE"
  success_message "push complete!"
	finish_commit
  exit 0
fi

if [ "$ACTION" == "commit" ]; then
  svn commit
  success_message "commit complete!"
	finish_commit
  exit 0
fi

echo "$USAGE"
exit 1
